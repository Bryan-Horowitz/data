# load environment
import pandas as pd
import sys


# declare universal variables
HEADER = [
'Sort',\
'Realm',\
'Subrealm',\
'Kingdom',\
'Subkingdom',\
'Phylum',\
'Subphylum',\
'Class',\
'Subclass',\
'Order',\
'Suborder',\
'Family',\
'Subfamily',\
'Genus',\
'Subgenus',\
'Species',\
'GenomeComposition',\
'LastChange',\
'LastChangeVersion',\
'ProposalForLastChange',\
'TaxonHistoryURL'
]


LIST_DROP = [
'Sort',\
'Species',\
'GenomeComposition',\
'LastChange',\
'LastChangeVersion',\
'ProposalForLastChange',\
'TaxonHistoryURL'
]


# declare functions
def pascalcase(s):
	list_words = s.split()
	converted = "".join(word[0].upper() + word[1:].lower() for word in list_words)
	return converted


def check_for_illegal_charc(s):
	list_illegal = ["'", "â€“", "*" ">", "<", "@", "]", "[", "|", ":", ";" " "]
	if any([x in s for x in list_illegal]):
		print('Error! dcid contains illegal characters!', s)


def initiate_enum_dict():
	d = {}
	list_levels = [i for i in HEADER if i not in LIST_DROP]
	for item in list_levels:
		enum_name = 'Virus' + item + 'Enum'
		d[enum_name] = {}
	return d


def add_enums_to_dicts(key, value, d):
	if value == value:
		enum = 'Virus' + key + 'Enum'
		dcid = 'Virus' + key + pascalcase(value)
		check_for_illegal_charc(dcid)
		d[enum][value] = dcid
	return d


def add_item_to_enums(df):
	list_levels = [i for i in HEADER if i not in LIST_DROP]
	dict_of_dicts = initiate_enum_dict()
	for index, row in df.iterrows():
		for item in list_levels:
			dict_of_dicts = add_enums_to_dicts(item, row[item], dict_of_dicts)
	return dict_of_dicts


def write_individual_entries_to_file(w, enum, d):
	for key, value in d.items():
		w.write('Node: dcid:' + value + '\n')
		w.write('name: "' + key + '"\n')
		w.write('typeOf: dcs:' + enum + '\n\n')
	return w


def write_dict_to_file(w, enum, d):
	w.write('# ' + enum + '\n')
	w.write('Node: dcid:' + enum + '\n')
	w.write('name: "' + enum + '"\n')
	w.write('typeOf: schema:Class\n')
	w.write('subClassOf: schema:Enumeration\n\n')
	w = write_individual_entries_to_file(w, enum, d)
	w.write('\n')
	return w


def generate_enums_mcf(f, w):
	df = pd.read_excel(f, names=HEADER, header=None, sheet_name=2)
	df = df.drop(LIST_DROP, axis=1).drop(0, axis=0)
	dict_of_dicts = add_item_to_enums(df)
	w = open(w, mode='w')
	w.write('# Schema generated by create_virus_taxonomic_ranking_enums.py\n\n')
	for key, value in dict_of_dicts.items():
		w = write_dict_to_file(w, key, value)


def main():
	file_input = sys.argv[1]
	file_output = sys.argv[2]

	generate_enums_mcf(file_input, file_output)


if __name__ == '__main__':
    main()
